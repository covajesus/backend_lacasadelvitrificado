#!/usr/bin/env python3
"""
Explicaci√≥n detallada paso a paso del ejemplo espec√≠fico
"""

def explicar_ejemplo_paso_a_paso():
    """Explica el ejemplo espec√≠fico que pregunt√≥ el usuario"""
    print("=" * 60)
    print("EXPLICACI√ìN DETALLADA DEL EJEMPLO")
    print("=" * 60)
    
    print("üì¶ DATOS INICIALES:")
    print("‚Ä¢ Cer√°mica A: 300kg (m√°ximo 1000kg por pallet)")
    print("‚Ä¢ Cer√°mica B: 400kg (m√°ximo 800kg por pallet)") 
    print("‚Ä¢ Adhesivo: 200kg (m√°ximo 600kg por pallet)")
    print()
    print(f"Peso total de la orden: {300 + 400 + 200} = 900kg")
    print()
    
    # Simulaci√≥n exacta del algoritmo
    print("üîÑ SIMULACI√ìN DEL ALGORITMO:")
    print("-" * 40)
    
    # Estado inicial
    remaining = [
        {"name": "Cer√°mica A", "weight": 300, "capacity": 1000},
        {"name": "Cer√°mica B", "weight": 400, "capacity": 800},
        {"name": "Adhesivo", "weight": 200, "capacity": 600}
    ]
    
    pallets = []
    paso = 1
    
    # PRIMER PALLET
    print(f"\nüèóÔ∏è PASO {paso}: PRIMER PALLET")
    print("-" * 30)
    
    print("Estado actual de productos:")
    for p in remaining:
        if p["weight"] > 0:
            print(f"  ‚Ä¢ {p['name']}: {p['weight']}kg restante (l√≠mite: {p['capacity']}kg/pallet)")
    
    # Encontrar capacidad del pallet
    active = [p for p in remaining if p["weight"] > 0]
    pallet_capacity = min(p["capacity"] for p in active)
    
    print(f"\nüîç ¬øCu√°l es la capacidad del pallet?")
    print("Limitaciones por producto:")
    for p in active:
        print(f"  ‚Ä¢ {p['name']}: m√°ximo {p['capacity']}kg")
    
    print(f"\n‚û°Ô∏è Capacidad del pallet = {pallet_capacity}kg")
    print(f"   (Se toma el M√çNIMO porque el pallet est√° limitado por el producto m√°s restrictivo)")
    print(f"   min({', '.join(str(p['capacity']) for p in active)}) = {pallet_capacity}kg")
    
    # Llenar el primer pallet
    print(f"\nüì• LLENANDO EL PALLET 1 (capacidad: {pallet_capacity}kg):")
    pallet_weight = 0
    pallet_contents = []
    
    # Cer√°mica A
    print(f"\n1. Intentando agregar Cer√°mica A:")
    space_available = pallet_capacity - pallet_weight
    can_add_A = min(remaining[0]["weight"], space_available)
    print(f"   ‚Ä¢ Peso disponible de Cer√°mica A: {remaining[0]['weight']}kg")
    print(f"   ‚Ä¢ Espacio disponible en pallet: {space_available}kg")
    print(f"   ‚Ä¢ Puede agregar: min({remaining[0]['weight']}, {space_available}) = {can_add_A}kg")
    
    pallet_weight += can_add_A
    remaining[0]["weight"] -= can_add_A
    pallet_contents.append(f"Cer√°mica A: {can_add_A}kg")
    
    print(f"   ‚úÖ Agregado: {can_add_A}kg de Cer√°mica A")
    print(f"   üìä Pallet actual: {pallet_weight}kg / {pallet_capacity}kg")
    print(f"   üì¶ Cer√°mica A restante: {remaining[0]['weight']}kg")
    
    # Cer√°mica B
    print(f"\n2. Intentando agregar Cer√°mica B:")
    space_available = pallet_capacity - pallet_weight
    can_add_B = min(remaining[1]["weight"], space_available)
    print(f"   ‚Ä¢ Peso disponible de Cer√°mica B: {remaining[1]['weight']}kg")
    print(f"   ‚Ä¢ Espacio disponible en pallet: {space_available}kg")
    print(f"   ‚Ä¢ Puede agregar: min({remaining[1]['weight']}, {space_available}) = {can_add_B}kg")
    
    pallet_weight += can_add_B
    remaining[1]["weight"] -= can_add_B
    pallet_contents.append(f"Cer√°mica B: {can_add_B}kg")
    
    print(f"   ‚úÖ Agregado: {can_add_B}kg de Cer√°mica B")
    print(f"   üìä Pallet actual: {pallet_weight}kg / {pallet_capacity}kg")
    print(f"   üì¶ Cer√°mica B restante: {remaining[1]['weight']}kg")
    
    # Adhesivo
    print(f"\n3. Intentando agregar Adhesivo:")
    space_available = pallet_capacity - pallet_weight
    can_add_adhesivo = min(remaining[2]["weight"], space_available)
    print(f"   ‚Ä¢ Peso disponible de Adhesivo: {remaining[2]['weight']}kg")
    print(f"   ‚Ä¢ Espacio disponible en pallet: {space_available}kg")
    print(f"   ‚Ä¢ Puede agregar: min({remaining[2]['weight']}, {space_available}) = {can_add_adhesivo}kg")
    
    if can_add_adhesivo > 0:
        pallet_weight += can_add_adhesivo
        remaining[2]["weight"] -= can_add_adhesivo
        pallet_contents.append(f"Adhesivo: {can_add_adhesivo}kg")
        print(f"   ‚úÖ Agregado: {can_add_adhesivo}kg de Adhesivo")
    else:
        print(f"   ‚ùå No cabe m√°s adhesivo (pallet lleno)")
    
    print(f"   üìä Pallet final: {pallet_weight}kg / {pallet_capacity}kg")
    print(f"   üì¶ Adhesivo restante: {remaining[2]['weight']}kg")
    
    pallets.append({
        "peso": pallet_weight,
        "capacidad": pallet_capacity,
        "contenido": pallet_contents
    })
    
    print(f"\n‚úÖ PALLET 1 COMPLETADO:")
    print(f"   Peso total: {pallet_weight}kg / {pallet_capacity}kg")
    print(f"   Contenido:")
    for contenido in pallet_contents:
        print(f"     - {contenido}")
    
    # SEGUNDO PALLET
    paso = 2
    print(f"\nüèóÔ∏è PASO {paso}: SEGUNDO PALLET")
    print("-" * 30)
    
    print("Estado actual de productos:")
    productos_restantes = []
    for p in remaining:
        if p["weight"] > 0:
            print(f"  ‚Ä¢ {p['name']}: {p['weight']}kg restante (l√≠mite: {p['capacity']}kg/pallet)")
            productos_restantes.append(p)
    
    if productos_restantes:
        # Capacidad del segundo pallet
        pallet_capacity_2 = min(p["capacity"] for p in productos_restantes)
        print(f"\nüîç Capacidad del pallet 2:")
        print("Limitaciones de productos restantes:")
        for p in productos_restantes:
            print(f"  ‚Ä¢ {p['name']}: m√°ximo {p['capacity']}kg")
        
        print(f"\n‚û°Ô∏è Capacidad del pallet = {pallet_capacity_2}kg")
        print(f"   min({', '.join(str(p['capacity']) for p in productos_restantes)}) = {pallet_capacity_2}kg")
        
        # Llenar segundo pallet
        print(f"\nüì• LLENANDO EL PALLET 2 (capacidad: {pallet_capacity_2}kg):")
        pallet_weight_2 = 0
        pallet_contents_2 = []
        
        for i, product in enumerate(remaining):
            if product["weight"] > 0:
                space_available = pallet_capacity_2 - pallet_weight_2
                can_add = min(product["weight"], space_available)
                
                print(f"\n{i+1}. Agregando {product['name']}:")
                print(f"   ‚Ä¢ Peso disponible: {product['weight']}kg")
                print(f"   ‚Ä¢ Espacio disponible: {space_available}kg")
                print(f"   ‚Ä¢ Puede agregar: {can_add}kg")
                
                if can_add > 0:
                    pallet_weight_2 += can_add
                    product["weight"] -= can_add
                    pallet_contents_2.append(f"{product['name']}: {can_add}kg")
                    print(f"   ‚úÖ Agregado: {can_add}kg")
                    print(f"   üìä Pallet actual: {pallet_weight_2}kg / {pallet_capacity_2}kg")
        
        pallets.append({
            "peso": pallet_weight_2,
            "capacidad": pallet_capacity_2,
            "contenido": pallet_contents_2
        })
        
        print(f"\n‚úÖ PALLET 2 COMPLETADO:")
        print(f"   Peso total: {pallet_weight_2}kg / {pallet_capacity_2}kg")
        print(f"   Contenido:")
        for contenido in pallet_contents_2:
            print(f"     - {contenido}")
    
    # RESULTADO FINAL
    print(f"\n" + "=" * 60)
    print("üéØ RESULTADO FINAL")
    print("=" * 60)
    
    print(f"Total de pallets necesarios: {len(pallets)}")
    print()
    
    for i, pallet in enumerate(pallets, 1):
        print(f"Pallet {i}: {pallet['peso']}kg / {pallet['capacidad']}kg")
        for contenido in pallet['contenido']:
            print(f"  - {contenido}")
        print()
    
    print("üîë PUNTOS CLAVE:")
    print("1. El pallet siempre est√° limitado por el producto M√ÅS RESTRICTIVO")
    print("2. Se aprovecha TODO el espacio disponible antes de abrir nuevo pallet")
    print("3. Los productos pueden compartir pallets si caben")
    print("4. Es m√°s eficiente que calcular pallets por separado")

if __name__ == "__main__":
    explicar_ejemplo_paso_a_paso()
