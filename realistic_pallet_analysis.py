#!/usr/bin/env python3
"""
Demostraci√≥n de por qu√© la f√≥rmula individual es correcta para pallets mixtos
"""
import math

def realistic_mixed_pallet_scenario():
    """Escenario realista de pallets mixtos"""
    print("=== ESCENARIO REALISTA: PALLETS MIXTOS ===")
    
    # Productos con restricciones reales
    products = [
        {
            "name": "Cer√°mica Fr√°gil", 
            "weight_per_unit": 20, 
            "quantity": 50,  # 1000kg total
            "weight_per_pallet": 500,  # M√°ximo por fragilidad
            "reason": "Limitado por fragilidad - no se puede apilar mucho"
        },
        {
            "name": "Adhesivo Qu√≠mico", 
            "weight_per_unit": 25, 
            "quantity": 20,  # 500kg total
            "weight_per_pallet": 600,  # M√°ximo por regulaciones qu√≠micas
            "reason": "Limitado por regulaciones de qu√≠micos"
        },
        {
            "name": "Herramientas", 
            "weight_per_unit": 5, 
            "quantity": 100,  # 500kg total
            "weight_per_pallet": 2000,  # Sin restricciones especiales
            "reason": "Sin restricciones especiales"
        }
    ]
    
    print("Productos en la orden:")
    for p in products:
        total_weight = p["weight_per_unit"] * p["quantity"]
        print(f"- {p['name']}: {total_weight}kg total")
        print(f"  Limitaci√≥n: {p['weight_per_pallet']}kg/pallet")
        print(f"  Raz√≥n: {p['reason']}")
    
    print(f"\nPeso total: {sum(p['weight_per_unit'] * p['quantity'] for p in products)}kg")
    
    # ¬øQu√© pasa si intentamos hacer pallets mixtos REALES?
    print(f"\n=== AN√ÅLISIS DE PALLETS MIXTOS REALES ===")
    
    # Pallet 1: Intentar mezclar fr√°gil + qu√≠mico
    print("Pallet 1 (Fr√°gil + Qu√≠mico):")
    print("- Cer√°mica fr√°gil: m√°ximo 500kg por restricci√≥n de fragilidad")
    print("- Adhesivo qu√≠mico: m√°ximo 600kg por regulaci√≥n")
    print("- ¬øSe pueden mezclar? S√ç, pero el pallet est√° limitado por el M√ÅS RESTRICTIVO")
    print("- Capacidad real del pallet mixto: min(500, 600) = 500kg")
    
    fragil_weight = 1000  # Total de cer√°mica fr√°gil
    quimico_weight = 500  # Total de adhesivo
    
    # Pallet mixto 1: llenar hasta l√≠mite de fr√°gil (500kg)
    pallet1_fragil = 500
    pallet1_quimico = 0  # No cabe m√°s por l√≠mite de fr√°gil
    remaining_fragil = fragil_weight - pallet1_fragil
    remaining_quimico = quimico_weight - pallet1_quimico
    
    print(f"  Pallet 1: {pallet1_fragil}kg fr√°gil + {pallet1_quimico}kg qu√≠mico = {pallet1_fragil + pallet1_quimico}kg")
    print(f"  Restante: {remaining_fragil}kg fr√°gil, {remaining_quimico}kg qu√≠mico")
    
    # Pallet 2: resto de fr√°gil (500kg) - llena el pallet por l√≠mite de fragilidad
    pallet2_fragil = remaining_fragil
    pallet2_quimico = 0  # No cabe por l√≠mite
    remaining_fragil = 0
    remaining_quimico = remaining_quimico
    
    print(f"  Pallet 2: {pallet2_fragil}kg fr√°gil + {pallet2_quimico}kg qu√≠mico = {pallet2_fragil + pallet2_quimico}kg")
    print(f"  Restante: {remaining_fragil}kg fr√°gil, {remaining_quimico}kg qu√≠mico")
    
    # Pallet 3: resto de qu√≠mico + herramientas
    herramientas_weight = 500
    pallet3_quimico = min(remaining_quimico, 600)  # M√°ximo por regulaci√≥n
    pallet3_herramientas = min(herramientas_weight, 600 - pallet3_quimico)  # Lo que quepa
    
    print(f"  Pallet 3: {pallet3_quimico}kg qu√≠mico + {pallet3_herramientas}kg herramientas = {pallet3_quimico + pallet3_herramientas}kg")
    
    remaining_herramientas = herramientas_weight - pallet3_herramientas
    
    if remaining_herramientas > 0:
        pallet4_herramientas = remaining_herramientas
        print(f"  Pallet 4: {pallet4_herramientas}kg herramientas = {pallet4_herramientas}kg")
        total_pallets_realistic = 4
    else:
        total_pallets_realistic = 3
    
    print(f"\nTotal pallets mixtos reales: {total_pallets_realistic}")
    
    # Comparar con f√≥rmulas
    print(f"\n=== COMPARACI√ìN DE F√ìRMULAS ===")
    
    # F√≥rmula individual (la que implement√©)
    total_individual = 0
    for p in products:
        total_weight = p["weight_per_unit"] * p["quantity"]
        pallets_needed = math.ceil(total_weight / p["weight_per_pallet"])
        total_individual += pallets_needed
        print(f"- {p['name']}: ceil({total_weight}/{p['weight_per_pallet']}) = {pallets_needed} pallets")
    
    print(f"F√≥rmula individual: {total_individual} pallets")
    print(f"Realidad mixta optimizada: {total_pallets_realistic} pallets")
    print(f"Diferencia: {total_individual - total_pallets_realistic} pallets")
    
    # La f√≥rmula individual es m√°s conservadora pero m√°s segura
    if total_individual >= total_pallets_realistic:
        print("‚úÖ La f√≥rmula individual es CONSERVADORA - garantiza capacidad suficiente")
        print("üì¶ Es preferible tener pallets de sobra que quedarse corto")
    else:
        print("‚ö†Ô∏è  La f√≥rmula individual subestima - necesita optimizaci√≥n")

def optimized_mixed_pallet_formula():
    """F√≥rmula optimizada que considera pallets mixtos reales"""
    print(f"\n=== PROPUESTA DE F√ìRMULA OPTIMIZADA ===")
    
    print("""
F√ìRMULA ACTUAL (Conservadora - la que implement√©):
- Calcula pallets por producto individualmente
- Suma todos los pallets necesarios
- VENTAJA: Garantiza capacidad suficiente
- DESVENTAJA: Puede sobreestimar en algunos casos

F√ìRMULA OPTIMIZADA (para pallets mixtos reales):
1. Ordenar productos por restricci√≥n de peso (m√°s restrictivo primero)
2. Simular llenado de pallets respetando la restricci√≥n m√°s limitante
3. Optimizar combinaciones cuando sea posible

C√ìDIGO OPTIMIZADO:
```python
def calculate_mixed_pallets_optimized(products):
    pallets = []
    remaining_products = products.copy()
    
    while any(p['remaining_weight'] > 0 for p in remaining_products):
        # Nuevo pallet
        current_pallet_capacity = min(p['weight_per_pallet'] for p in remaining_products if p['remaining_weight'] > 0)
        current_pallet_weight = 0
        
        # Llenar pallet respetando restricciones
        for product in remaining_products:
            if product['remaining_weight'] > 0:
                max_can_add = min(
                    product['remaining_weight'],
                    product['weight_per_pallet'],
                    current_pallet_capacity - current_pallet_weight
                )
                current_pallet_weight += max_can_add
                product['remaining_weight'] -= max_can_add
        
        pallets.append(current_pallet_weight)
    
    return len(pallets)
```

RECOMENDACI√ìN:
- Usar f√≥rmula individual (actual) para garantizar capacidad
- Implementar optimizaci√≥n como mejora futura
- Para casos cr√≠ticos, usar simulaci√≥n detallada
""")

if __name__ == "__main__":
    realistic_mixed_pallet_scenario()
    optimized_mixed_pallet_formula()
